import type { EstimateLineItem } from '$lib/types/assessment';

export interface VehicleDetails {
	vin_number?: string | null;
	vehicle_year?: number | null;
	vehicle_make?: string | null;
	vehicle_model?: string | null;
}

export interface PartsListOptions {
	assessmentNumber: string;
	companyName?: string;
	companyEmail?: string;
}

/**
 * Generate a CSV string for parts list export
 * Filters line items to only include parts (process_type='N')
 * Exports: Vehicle Details + Part Type, Description, Quantity
 *
 * @param lineItems - Array of estimate line items
 * @param vehicleDetails - Optional vehicle details to include at top of CSV
 * @returns CSV string ready for download
 */
export function generatePartsListCSV(
	lineItems: EstimateLineItem[],
	vehicleDetails?: VehicleDetails
): string {
	// Escape fields that contain commas or quotes
	const escapeCSV = (field: string): string => {
		if (field.includes(',') || field.includes('"') || field.includes('\n')) {
			return `"${field.replace(/"/g, '""')}"`;
		}
		return field;
	};

	// Build CSV content
	const lines: string[] = [];

	// Add vehicle details header section if provided
	if (vehicleDetails) {
		lines.push('Vehicle Details');
		lines.push(`VIN,${escapeCSV(vehicleDetails.vin_number || 'N/A')}`);
		lines.push(`Year,${vehicleDetails.vehicle_year || 'N/A'}`);
		lines.push(`Make,${escapeCSV(vehicleDetails.vehicle_make || 'N/A')}`);
		lines.push(`Model,${escapeCSV(vehicleDetails.vehicle_model || 'N/A')}`);
		lines.push(''); // Empty line separator
	}

	// Filter to only include parts (process_type='N')
	const partsOnly = lineItems.filter(item => item.process_type === 'N');

	// Parts list header
	lines.push('Part Type,Description,Quantity');

	// Parts list rows
	const rows = partsOnly.map(item => {
		const partType = item.part_type || 'N/A';
		const description = item.description || '(No description)';
		const quantity = '1'; // Default quantity

		return [escapeCSV(partType), escapeCSV(description), quantity].join(',');
	});

	lines.push(...rows);

	// Combine all lines
	return lines.join('\n');


/**
 * Generate a plain text parts list for easy copy/paste into emails
 */
export function generatePartsListText(
	lineItems: EstimateLineItem[],
	vehicleDetails?: VehicleDetails,
	options?: PartsListOptions
): string {
	const lines: string[] = [];

	// Header
	lines.push('═══════════════════════════════════════════════════════════');
	lines.push('                    PARTS ORDER REQUEST');
	lines.push('═══════════════════════════════════════════════════════════');
	lines.push('');

	// Assessment info
	if (options?.assessmentNumber) {
		lines.push(`Assessment: ${options.assessmentNumber}`);
	}
	const today = new Date().toLocaleDateString('en-ZA', {
		year: 'numeric',
		month: '2-digit',
		day: '2-digit'
	});
	lines.push(`Date: ${today}`);
	lines.push('');

	// Vehicle details section
	if (vehicleDetails) {
		lines.push('VEHICLE DETAILS');
		lines.push('───────────────────────────────────────────────────────────');
		lines.push(`VIN:   ${vehicleDetails.vin_number || 'N/A'}`);
		lines.push(`Year:  ${vehicleDetails.vehicle_year || 'N/A'}`);
		lines.push(`Make:  ${vehicleDetails.vehicle_make || 'N/A'}`);
		lines.push(`Model: ${vehicleDetails.vehicle_model || 'N/A'}`);
		lines.push('');
	}

	// Filter to only include parts (process_type='N')
	const partsOnly = lineItems.filter(item => item.process_type === 'N');

	// Parts list section
	lines.push('PARTS REQUIRED');
	lines.push('───────────────────────────────────────────────────────────');

	if (partsOnly.length === 0) {
		lines.push('No parts to order');
	} else {
		partsOnly.forEach((item, index) => {
			const partType = item.part_type || 'N/A';
			const description = item.description || '(No description)';
			lines.push(`${index + 1}. ${description} (${partType})`);
		});
	}

	lines.push('');
	lines.push('═══════════════════════════════════════════════════════════');

	// Footer
	if (options?.companyName || options?.companyEmail) {
		lines.push('');
		if (options.companyName) {
			lines.push(`Generated by ${options.companyName}`);
		}
		if (options.companyEmail) {
			lines.push(`Contact: ${options.companyEmail}`);
		}
	}

	return lines.join('\n');
}
